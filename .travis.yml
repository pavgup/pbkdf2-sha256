matrix:
  exclude:
    - env: ignore=this
  include:
    - compiler: clang
      env: REAL_CC=clang-3.2 REAL_CXX=clang++-3.2 PACKAGE=clang-3.2 SUPPORT=g++-4.8 
    - compiler: clang
      env: REAL_CC=clang-3.3 REAL_CXX=clang++-3.3 PACKAGE=clang-3.3 SUPPORT=g++-4.8 
    - compiler: clang
      env: REAL_CC=clang-3.4 REAL_CXX=clang++-3.4 PACKAGE=clang-3.4 SUPPORT=g++-4.8 
    - compiler: clang
      env: REAL_CC=clang-3.5 REAL_CXX=clang++-3.5 PACKAGE=clang-3.5 SUPPORT=g++-4.8 
    - compiler: gcc
      env: REAL_CC=gcc-4.7   REAL_CXX=g++-4.7     PACKAGE=g++-4.7   SUPPORT=
    - compiler: gcc
      env: REAL_CC=gcc-4.8   REAL_CXX=g++-4.8     PACKAGE=g++-4.8   SUPPORT=
    - compiler: gcc
      env: REAL_CC=gcc-4.9   REAL_CXX=g++-4.9     PACKAGE=g++-4.9   SUPPORT=
notifications:
  email:
    recipients:
      - pg8p@virginia.edu
    on_success: always
    on_failure: always
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/2cbad070c3ec6dd3dff4
    on_success: always  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: true     # default: false
cache:
  apt: true
os:
  - linux
#  - osx
language: cpp
before_install:
  #new boost
  - sudo add-apt-repository --yes ppa:boost-latest/ppa
  #new GCC
  - sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test
  #new Clang
  - sudo add-apt-repository --yes ppa:h-rayflood/llvm
  # get old gcc, compiler tools only ...
  - sudo add-apt-repository ppa:h-rayflood/gcc-lower
  # get new gcc, maybe replace c/c++ runtime !!
  - sudo add-apt-repository ppa:h-rayflood/gcc-upper
  - sudo apt-get update -qq
  - sudo apt-get dist-upgrade
  - sudo apt-get install -qq $SUPPORT
  - sudo apt-get install -qq $PACKAGE
  - sudo apt-get install -qq cmake yasm libboost1.55-all-dev zlib1g-dev
  - export CC=${REAL_CC} CXX=${REAL_CXX}
install:
  # Linux prerequisite steps 
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get -qq update; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get -qq install build-essential libgtest-dev libssl-dev lcov ggcov gdb unzip; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get -qq install doxygen; fi
before_install:
  - sudo pip install cpp-coveralls
  - CFLAGS=-coverage LDFLAGS=-coverage ./configure.py --debug
  - ninja -t clean ninja_test && ninja ninja_test
  - ./ninja_test
  - gcov build/*.o   # for coverall-independent coverage
  - coveralls --exclude lib --exclude tests --gcov-options '\-lp' # for coverall-dependent coverage
script:
  - unset CFLAGS && unset LDFLAGS && ./configure.py --bootstrap && ./ninja ninja_test && ./ninja_test --gtest_filter=-SubprocessTest.SetWithLots && ./misc/ninja_syntax_test.py
  - ./ninja manual
  - ./ninja doxygen
